"use strict";

// Идея акторов заключается в том что это абсолютно независимые программные компоненты которые
// не делают вызовов друг в другу, а только обмениваются сообщениями. Такая модель позволяет
// просто масштабировать приложения. Главное что у акторов нету общего состояния, а те конструкции
// данных которые они у себя заводят не должны быть критичными. Тоесть при падении одного актора
// он может быть легко перезапущен. Каждого из акторов мы можем запустить несколько штук, у актора на входе
// должна стоять очередь, и приходящие задачи ставятся в эту очередь. Сами очереди лучше держать не в самом
// акторе, а в менеджере очередей который будет доставать задачи и отдавать их акторам, он же еще будет
// управлять рассылкой сообщений между акторами, при этом данные не передаются по ссылке, а сериализуются и
// десериализуются.

// Принцип кооперативной многозадачности это когда все происходит в одном треде и одна функция отдает другой управление
// по собственному желанию.

// В данном примере акторы реализованы на примере одного потока.
const ActorSystem = require("./system.js");

const EXIT_NORMAL = 1000;
const EXIT_ABNORMAL = 5000;

ActorSystem.start("Root");

// Когда кто-то нажимает ctrl + C
process.on("SIGINT", () => {
  console.log("");
  ActorSystem.stop("Root"); // корневой процесс останавливает актора Рут. Который в себе может запустить еще несколько акторов.
  setTimeout(() => { // А те у себя внутри еще несколько и таким образов у нас строится древовидная структура.
    console.log("Graceful shutdown");
    process.exit(0);
  }, EXIT_NORMAL);
  setTimeout(() => {
    console.log("Abnormal termination");
    process.exit(1);
  }, EXIT_ABNORMAL);
});
