
cursors.subscribe((cursor) => { // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∏–º –∫—É—Ä—Å–æ—Ä–∞.
  console.dir({ cursor });"use strict";

// –ü—Ä–∏–º–µ—Ä –≥–¥–µ –º—ã —Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

  const { Observable } = require("rxjs");
  const operators = require("rxjs/operators");
  const { map, filter, take, reduce } = operators;
  const { debounceTime, throttleTime } = operators;

// –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ—Ç–æ–∫ –≤ rawMode (—á–∏—Ç–∞–µ–º –¥–æ–∫—É).
  process.stdin.setRawMode(true);

// Keyboard stream
// –°–æ–∑–¥–∞–µ–º Observable –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
  const keyboard = new Observable((subscriber) => {
    process.stdin.on("data", (data) => {
      subscriber.next(data);
    });
  });

// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫ –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
  keyboard.subscribe((data) => {
    console.log("---");
    console.dir({ keyboard: data });
  });

// Cursors

  const arrows = {
    65: "ü°Ö",
    66: "ü°á",
    67: "ü°Ü",
    68: "ü°Ñ",
  };

// –î–µ–ª–∞–µ–º –µ—â–µ –æ–¥–∏–Ω —Å—Ç—Ä–∏–º –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –∑–∞–ø–∏—Ö–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–µ–ª–æ—á–∫–∏.
  const cursors = keyboard.pipe(
    filter((buf) => (buf[0] === 27) && (buf[1] === 91)), // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ—Å–∫–µ–π–ø —Å–∏–º–≤–æ–ª–∞ –∏ –ø–µ—Ä–≤—ã–π –±–∞–π—Ç —ç—Ç–æ –µ—Å–∫–µ–π–ø –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 91 –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –µ—Å–ª–∏ –Ω–∞–∂–∏–º–∞—Ç—å —Å—Ç—Ä–µ–ª–æ—á–∫–∏
    map((buf) => buf[2]), // —Ç–æ –≤–æ –≤—Ç–æ—Ä–æ–º –±–∞–π—Ç–µ –±—É–¥–µ—Ç –∫–∞–∫–∞—è-—Ç–æ —Å—Ç—Ä–µ–ª–æ—á–∫–∞
    map((key) => arrows[key]), // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∫–∞–Ω–∫–æ–¥ –∫–ª–∞–≤–∏—à–∏ (65, 67, –∏ —Ç.–¥.) –≤ —Å—Ç–∏–∫–µ—Ä —Å—Ç—Ä–µ–ª–æ—á–∫–∏
    //throttleTime(1000), // –Ω–µ –¥–∞–µ–º –Ω–∞–∂–∏–º–∞—Ç—å –∫—É—Ä—Å–æ—Ä—ã —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
    debounceTime(2000), // —Å–Ω–∞—á–∞–ª–∞ –∂–¥–µ—Ç 2—Å. –µ—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ,
    // –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Ç–æ —É–∂–µ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è, –∞ –µ—Å–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
    // —Ç–æ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è, –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø—Ä–æ–π–¥–µ—Ç 2 —Å–µ–∫—É–Ω–¥—ã
    // —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è.
  );

});

// Keypress

const keypress = keyboard.pipe(map((buf) => buf[0])); // –ò–∑ keyboard —Å—Ç—Ä–∏–º–∞ –¥–æ—Å—Ç–∞–µ–º keypress –≥–¥–µ —É –Ω–∞—Å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –±—É—Ñ–µ—Ä–∞.

keypress.subscribe((key) => { // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –±—É–∫–≤.
  console.dir({ keypress: key });
});

// Take first 5 chars

const take5 = keypress.pipe(
  take(5),
  map((key) => String.fromCharCode(key)), // –ö–æ–¥ –±—É–∫–≤—ã –∏–∑ —á–∞—Ä–∫–æ–¥–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–∏–º–≤–æ–ª.
  reduce((acc, char) => acc + char) // –°–∫–ª–µ–∏–º –∏—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.
);

take5.subscribe((s) => {
  console.dir({ take5: s });
});

// Exit / Ctrl+C
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥ –ø–æ –Ω–∞–∂–∞—Ç–∏—é ctrl+c
keypress
  .pipe(filter((x) => x === 3)) // —Å–∫–∞–Ω–∫–æ–¥ ctrl+c
  .subscribe(process.exit.bind(null, 0)); // –≤—ã–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.
