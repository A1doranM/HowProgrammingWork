"use strict";

// Вот у нас есть структура которая на вход принимает объект
// после чего достает из него свойство. Но при этом мы ничего не знаем
// о типе доставаемого свойства. Такой код будет полиморфным, это свойство
// позволяющее обрабатывать значения разных типов идентичным образом, то
// есть исполнять физически один и тот же код для данных разных типов.
// Компилятору тяжело сходу оптимизировать таой код в машинных инструкциях
// но по ходу выполнения как например ниже будет создаваться так называемый
// инлаин кэш для этой функции в котором будет запоминаться для каких типов
// была вызвана эта функция, и эти знания компилятор использует для последующей
// оптимизации этой функции при вызове с похожими аргументами.

// Инлайн кеши касаются не только свойств, но и методов, массивов, и т.д.
// Надо понимать что все оптимизации происходят на уровне функции, поэтому
// глобальные переменные могут оптимизироваться хуже чем другие. Так как
// самая верхняя функция в которой работает весь остальной код иногда не
// очень хорошо оптимизируется.

// Как только инлайн кешей становится больше 4 функция становится мегаморфной
// и ее кеши хранятся уже в глобальном инлайн кеше, который уже медленнее. Поэтому
// стараемся не писать слишком вариативных функци если это возможно.

// В комментариях к коду подписаны формы которые компилятор запоминает
// для разных входящих аргументов функции и когда видит похожую форму
// то использует уже полученные знания для ускорения работы. Здесь у
// нас всего будет выработано 4 различные формы.

const getX = obj => obj.x;

console.log(getX({ x: 10 }));        // { x: number } 1-форма.
console.log(getX({ x: 70 }));        // { x: number } 1-форма.
console.log(getX({ x: 10, y: 20 })); // { x: number, y: number } 2-форма.
console.log(getX({ y: 20, x: 10 })); // { y: number, x: number } 3-форма.



class Point {
  constructor(x, y) { // {}
    this.x = x;       // { x: number }
    this.y = y;       // { x: number, y: number } Итог. Будет 2-форма.
  }
}

console.log(getX(new Point(10, 20)));

console.log(getX({ x: 10, y: 20, z: 30 }));
// { x: number, y: number, z: number } 4-форма.

{
  const point = { x: 10, y: 20, z: 30 };
  // { x: number, y: number, z: number } 4-форма.
  delete point.z;
  // { x: number, y: number } 2-форма.
  console.log(getX(point));
}
