"use strict";

// EventEmitter - это паттерн который позволяет создать объект, навешивать на него обработчики событий
// каждое событие именованное и затем этот объект может использоваться в разных частях программы.
// На событие можно реагировать, либо генерировать. В целом это такая себе шина событий, куда все
// посылают события и реагируют на них. Он нужен для слабого связывания кода, когда мы не можем передать ссылку,
// на функцию, или еще что-то. И мы не знаем ожидает ли наших данных кто-то там. Тогда мы просто генерируем событие
// и посылаем с ним данные, а те кто подписан на него их получают и обрабатывают.

const EventEmitter = function() {
  this.events = {}; // Коллекция событий.
};

EventEmitter.prototype.on = function(name, fn) {
  const event = this.events[name]; // Смотрим есть ли в коллекции уже такое событие
  if (event) event.push(fn); // если есть то добавляем нашу функцию в массив событий с таким именем
  else this.events[name] = [fn]; // если нету то создаем массив с такой функцией и добавляем в коллекцию с именем события.
};

EventEmitter.prototype.emit = function(name, ...data) {
  const event = this.events[name]; // Ищем есть ли такое событие
  if (!event) return; // если нет ничего не делаем
  for (const listener of event) listener(...data); // если есть то проходимся по всему массиву и вызываем все функции
                                                   // хранящиеся в нем.
};

module.exports = EventEmitter;
