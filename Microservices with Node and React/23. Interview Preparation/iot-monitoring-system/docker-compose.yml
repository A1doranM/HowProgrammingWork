version: '3.8'

services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15-alpine
    container_name: iot-postgresql
    environment:
      POSTGRES_DB: iot_monitoring
      POSTGRES_USER: iot_user
      POSTGRES_PASSWORD: iot_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./infrastructure/postgres/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - iot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iot_user -d iot_monitoring"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: iot-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Kafka Message Broker with KRaft (no Zookeeper needed)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: iot-kafka
    environment:
      # KRaft mode configuration
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      
      # Topic and replication settings
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_RETENTION_HOURS: 24
      
      # KRaft specific settings
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      bash -c "
        # Format the storage directory for KRaft
        kafka-storage format -t MkU3OEVBNTcwNTJENDM2Qk -c /etc/kafka/kafka.properties --ignore-formatted 2>/dev/null || true
        # Start Kafka
        /etc/confluent/docker/run
      "

  # Kafka Topics Initialization
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: iot-kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c "
        echo 'Creating Kafka topics...'
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic sensors-data
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 2 --replication-factor 1 --topic alerts
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 2 --replication-factor 1 --topic metrics
        echo 'Kafka topics created successfully!'
        kafka-topics --list --bootstrap-server kafka:29092
      "
    networks:
      - iot-network

  # Development tools (optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: iot-kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: iot-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    ports:
      - "8080:8080"
    networks:
      - iot-network

  # Redis Commander (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: iot-redis-commander
    depends_on:
      - redis
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - iot-network

  # IoT Simulator Service - Generates simulated sensor data
  iot-simulator:
    build:
      context: ./services/iot-simulator
      dockerfile: Dockerfile
    container_name: iot-simulator
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_CLIENT_ID=iot-simulator
      - KAFKA_TOPIC_SENSORS=sensors-data
      - IOT_SIMULATOR_PORT=3001
      - LOG_LEVEL=info
    ports:
      - "3001:3001"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Data Ingestion Service - Consumes and stores sensor data
  data-ingestion:
    build:
      context: ./services/data-ingestion
      dockerfile: Dockerfile
    container_name: iot-data-ingestion
    depends_on:
      kafka:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - NODE_ENV=development
      - DATA_INGESTION_PORT=3002
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_CLIENT_ID=data-ingestion
      - KAFKA_TOPIC_SENSORS=sensors-data
      - KAFKA_GROUP_ID=data-ingestion-group
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_DB=iot_monitoring
      - POSTGRES_USER=iot_user
      - POSTGRES_PASSWORD=iot_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=info
      - VALIDATE_SCHEMA=true
    ports:
      - "3002:3002"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    
  # API Gateway Service - Routes client requests to appropriate microservices
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: iot-api-gateway
    depends_on:
      data-ingestion:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - API_GATEWAY_PORT=3000
      - DATA_INGESTION_HOST=data-ingestion
      - DATA_INGESTION_PORT=3002
      - WEBSOCKET_HOST=websocket-service
      - WEBSOCKET_PORT=3003
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CORS_ORIGIN=*
      - LOG_LEVEL=info
    ports:
      - "3000:3000"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    
  # WebSocket Service - Provides real-time updates to clients
  websocket-service:
    build:
      context: ./services/websocket-service
      dockerfile: Dockerfile
    container_name: iot-websocket-service
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - NODE_ENV=development
      - WEBSOCKET_PORT=3003
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_CLIENT_ID=websocket-service
      - KAFKA_GROUP_ID=websocket-consumer-group
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CORS_ORIGIN=*
      - LOG_LEVEL=info
    ports:
      - "3003:3003"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Alert Processing Service - Monitors sensor data and manages alerts
  alert-processing:
    build:
      context: ./services/alert-processing
      dockerfile: Dockerfile
    container_name: iot-alert-processing
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - NODE_ENV=development
      - PORT=3004
      - KAFKA_BROKER=kafka:29092
      - KAFKA_CLIENT_ID=alert-processing
      - KAFKA_GROUP_ID=alert-processing-group
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=info
    ports:
      - "3004:3004"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Frontend Dashboard Service - React application with real-time IoT monitoring
  dashboard:
    build:
      context: ./dashboard/react-app
      dockerfile: Dockerfile
    container_name: iot-dashboard
    depends_on:
      api-gateway:
        condition: service_healthy
      websocket-service:
        condition: service_healthy
    environment:
      # Frontend environment variables for API and WebSocket connections
      - VITE_API_URL=http://localhost:3000/api
      - VITE_WS_URL=/socket.io/
      - NODE_ENV=production
    ports:
      - "5173:80"  # Nginx serves on port 80, expose as 5173 for easy access
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local

networks:
  iot-network:
    driver: bridge
    # Let Docker auto-assign a non-conflicting subnet
