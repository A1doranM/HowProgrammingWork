version: '3.8'

services:
  # =========================================================================
  # Infrastructure Services
  # =========================================================================
  
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - digital_twin_network

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: sensors
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data-pipeline/sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - digital_twin_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - digital_twin_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - digital_twin_network

  mosquitto:
    image: eclipse-mosquitto:2
    container_name: mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./data-pipeline/mqtt/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - digital_twin_network

  # =========================================================================
  # Application Services
  # =========================================================================

  fastapi-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi-gateway
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sensors
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - digital_twin_network

  mqtt-kafka-bridge:
    build:
      context: ./data-pipeline
      dockerfile: Dockerfile.bridge
    container_name: mqtt-kafka-bridge
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      mosquitto:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - digital_twin_network

  stream-processor:
    build:
      context: ./data-pipeline
      dockerfile: Dockerfile.processor
    container_name: stream-processor
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sensors
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - digital_twin_network

  event-store:
    build:
      context: ./data-pipeline
      dockerfile: Dockerfile.eventstore
    container_name: event-store
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sensors
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - digital_twin_network

  iot-simulator:
    build:
      context: ./data-pipeline
      dockerfile: Dockerfile.simulator
    container_name: iot-simulator
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
      - SIMULATION_INTERVAL_SECONDS=2
      - SIMULATION_MACHINES=CNC-001,CNC-002,CNC-003,CNC-004,CNC-005
    depends_on:
      mosquitto:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - digital_twin_network

# =========================================================================
# Network Configuration
# =========================================================================
networks:
  digital_twin_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =========================================================================
# Volume Configuration
# =========================================================================
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
